"use client";
import "react-toastify/dist/ReactToastify.css";
import "./globals.css";
import Theme from "@/components/Theme";
import { Provider } from "react-redux";
import { Inter } from "next/font/google";
import {  usePathname, useSearchParams, useRouter } from "next/navigation";
import {  withoutHeader } from "@/constants";
import "react-multi-carousel/lib/styles.css";
import { store } from "@/lib/store";
import { Body } from "./style";
import {  useEffect, useState } from "react";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { useCookies } from "react-cookie";
import { ToastContainer } from "react-toastify";
import { Layout } from "@/components/Layout/Layout";

const inter = Inter({ subsets: ["latin"] });

const metadata = {
	title: "Create Next App",
	description: "Generated by create next app",
};

export default function RootLayout({ children, ...rest }) {
	const pathname = usePathname();
	const params = useSearchParams();
	const router = useRouter();
	const [open, setOpen] = useState(false);
	const page = params.get("page");
	const signinId = params.get("signinId");
	const [token, setToken] = useCookies(["token"]);
	const api_url = process.env.NEXT_PUBLIC_BACKEND_URL;

	useEffect(() => {
		if (page === "signin") {
			setOpen(true);
		}
	}, [page]);

	useEffect(() => {
		async function fetchData() {
			if (signinId) {
				const payloadUuid = signinId;
				const check = await fetch(api_url + "auth/getPayload/" + payloadUuid);
				const checkData = await check.json();
				const hex = checkData.payload.response.hex;
				const checkSign = await fetch(api_url + "auth/checkSign?hex=" + hex);
				const checkSignData = await checkSign.json();
				if ("xrpAddress" in checkSignData) {
					//store the `token` in cookie
					const token = checkSignData.token;
					setToken("token", token, { path: "/" });
					window.location.href = "/";
				}
			}
		}
		if (signinId) {
			fetchData();
		}
	}, [signinId]);

	return (
		<html lang="en">
			<LocalizationProvider dateAdapter={AdapterDayjs}>
				<Provider store={store}>
					<Theme
						options={{
							key: "mui-theme",
						}}>
						<Body
							className={inter.className}
							hasNav={withoutHeader.includes(pathname) ? false : true}>
							<Layout hideNavbar={withoutHeader.includes(pathname) ? false : true}>
								{children}
							</Layout>
							<ToastContainer />
						</Body>
					</Theme>
				</Provider>
			</LocalizationProvider>
		</html>
	);
}
